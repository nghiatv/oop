<?php

/**
 * Created by PhpStorm.
 * User: nghia
 * Date: 8/6/16
 * Time: 2:49 PM
 */

include_once "database.php";

class product extends database
{
    private $table = "products";


    public function __construct()
    {
        parent::__construct();
    }

    public function getAll()
    {
        return parent::getAll($this->table); // TODO: Change the autogenerated stub
    }

    public function getItemById($id)
    {
        return parent::getItemById($this->table, $id); // TODO: Change the autogenerated stub
    }

    public function getItemByName($name)
    {
        return parent::getItemByName($this->table, $name,'product_name'); // TODO: Change the autogenerated stub
    }

    public function insertProduct($array)
    {
       if(array_key_exists('product_name', $array) && array_key_exists('product_price', $array) && array_key_exists('product_description', $array) && array_key_exists('link_image', $array)){
           $sql = "INSERT INTO " . $this->table . " (product_name,product_price,product_description,link_image) VALUES (:product_name, :product_price ,:product_description,:link_image) ";
           try {
               $this->stmt = $this->conn->prepare($sql);

               $this->stmt->bindParam(":product_name", $array['product_name']);
               $this->stmt->bindParam(":product_price", $array['product_price'], PDO::PARAM_INT);
               $this->stmt->bindParam(":product_description", $array['product_description']);
               $this->stmt->bindParam(":link_image", $array['link_image']);

               $this->stmt->execute();


           } catch (PDOException $e) {
               die($e->getMessage());
           };

           $id = $this->conn->lastInsertId();
           return $this->getItemById($id);
       }else{
           return false;
       }

    }


    public function updateProduct($id, $array)
    {

        if (array_key_exists('product_name', $array) && array_key_exists('product_price', $array) && array_key_exists('product_description', $array) && array_key_exists('link_image', $array)) {

            $sql = "UPDATE " . $this->table . "
                    SET product_name=:product_name,
                    product_price=:product_price,
                    product_description=:product_description,
                    link_image=:link_image
                    WHERE id = :id";
            try {

                $this->stmt = $this->conn->prepare($sql);
                $this->stmt->bindParam(":product_name", $array['product_name']);
                $this->stmt->bindParam(":product_price", $array['product_price'], PDO::PARAM_INT);
                $this->stmt->bindParam(":product_description", $array['product_description']);
                $this->stmt->bindParam(":link_image", $array['link_image']);
                $this->stmt->bindParam(":id", $id);

                $this->stmt->execute();

            } catch (PDOException $e) {
                die($e->getMessage());
            }

            return $this->getItemById($id);

        } else {
            return false;
        }

    }

    public function searchByName($name)
    {
        $sql = "SELECT * FROM ".$this->table." WHERE product_name LIKE ?";

        $name = "%$name%";
        try {
            $this->stmt = $this->conn->prepare($sql);
            $this->stmt->bindParam(1, $name);
            $this->stmt->execute();

        } catch (PDOException $e) {
            die($e->getMessage());
        }
        return $this->stmt->fetchAll(PDO::FETCH_ASSOC);

    }

    public function searchByPrice($min,$max){
        $sql = "SELECT * FROM ".$this->table." WHERE product_price BETWEEN ? AND ? ";

        try{
            $this->stmt = $this->conn->prepare($sql);
            $this->stmt->bindParam(1,$min,PDO::PARAM_INT);
            $this->stmt->bindParam(2,$max,PDO::PARAM_INT);
            $this->stmt->execute();
        } catch(PDOException $e){
            die($e->getMessage());
        }

        return $this->stmt->fetchAll(PDO::FETCH_ASSOC);
    }


    public function deleteById( $id)
    {
        return parent::deleteById($this->table, $id); // TODO: Change the autogenerated stub
    }
}